apply plugin: "kotlin-multiplatform"
apply plugin: "com.moowork.node"

kotlin {
    targets {
        fromPreset(presets.jvm, "jvm") {
            compilations.all {
                def task = tasks[compileKotlinTaskName]
                task.sourceCompatibility = JavaVersion.VERSION_1_8
                task.targetCompatibility = JavaVersion.VERSION_1_8
                task.kotlinOptions {
                    jvmTarget = '1.8'
                }
            }
        }
        fromPreset(presets.js, "js") {
            compilations.all {
                tasks[compileKotlinTaskName].kotlinOptions {
                    languageVersion = "1.3"
                    moduleKind = "umd"
                    sourceMap = true
                    metaInfo = true
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
            }
        }
        jvmTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test"
                implementation "org.jetbrains.kotlin:kotlin-test-junit"
            }
        }
        jsMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
            }
        }
        jsTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-js"
            }
        }
    }
}

node {
    download = false
//    version = '8.12.0'
//    distBaseUrl = 'https://nodejs.org/dist'
//    workDir = file("${rootProject.buildDir}/nodejs")
//    nodeModulesDir = file("${rootProject.projectDir}")
}

def testJsFolder = "$buildDir/test-js"

/**
 * Copy production project output
 */
task copyJsMainOutput(type: Copy) {
    dependsOn compileKotlinJs

    from compileKotlinJs.outputFile.parentFile.path
    include "*.js"
    include "*.js.map"
    into "$testJsFolder/node_modules"
}

/**
 * Copy test project output
 */
task copyJsTestOutput(type: Copy) {
    dependsOn compileTestKotlinJs

    from compileTestKotlinJs.outputFile.parentFile.path
    include "*.js"
    include "*.js.map"
    into testJsFolder
}

def jsPathPredicate = { FileTreeElement fileTreeElement ->
    def path = fileTreeElement.path
    (path.endsWith(".js") || path.endsWith(".js.map")) &&
            (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
}

def executionClosure = { Task task ->
    { File file ->
        task.from(zipTree(file.absolutePath), {
            includeEmptyDirs = false
            task.include(jsPathPredicate)
        })
    }
}

afterEvaluate {
    task assembleTest(type: Sync) {
        configurations.jsTestCompileClasspath.each (executionClosure(it))
        into "$testJsFolder/node_modules"
    }

    assemble.dependsOn assembleTest
}

task installMocha(type: NpmTask) {
    args = ['install', 'mocha']
}

// We run mocha tests from our directory.
task runMocha(type: NodeTask) {
    dependsOn installMocha, copyJsMainOutput, copyJsTestOutput, assemble
    script = file('node_modules/mocha/bin/mocha')
    args = ["$testJsFolder/model_test.js"]
}

jsTest.dependsOn runMocha