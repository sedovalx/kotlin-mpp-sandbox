apply plugin: "kotlin-multiplatform"
apply plugin: "com.moowork.node"

kotlin {
    targets {
        fromPreset(presets.jvm, "jvm") {
            compilations.all {
                def task = tasks[compileKotlinTaskName]
                task.sourceCompatibility = JavaVersion.VERSION_1_8
                task.targetCompatibility = JavaVersion.VERSION_1_8
                task.kotlinOptions {
                    jvmTarget = '1.8'
                }
            }
        }
        fromPreset(presets.js, "js") {
            compilations.all {
                tasks[compileKotlinTaskName].kotlinOptions {
                    languageVersion = "1.3"
                    moduleKind = "commonjs"
                    sourceMap = true
                    metaInfo = true
                    main = 'call'
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
            }
        }
        jvmTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test"
                implementation "org.jetbrains.kotlin:kotlin-test-junit"
            }
        }
        jsMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
            }
        }
        jsTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-js"
            }
        }
    }
}

node {
//    download = true
//    version = '8.12.0'
    yarnVersion = '1.12.3'
//    distBaseUrl = 'https://nodejs.org/dist'
    workDir = file("${rootProject.buildDir}/nodejs")
    nodeModulesDir = file("${rootProject.projectDir}")
}

task printConfigurations(dependsOn: [yarn, compileKotlinJs]) {
    doLast {
        configurations.each { 
            println(it)
            try {
                it.each {
                    def fileTree = zipTree(it.absolutePath).matching { 
                        include '*.js'
                        include "*.js.map"
                    }
                    fileTree.getFiles().each {
                        println("\t" + it.absolutePath)
                    }
                }
            } catch (Exception ex) {
                println("!! " + ex.message)
            }
            
        }
    }
}

task populateNodeModulesForTests(dependsOn: [yarn, compileKotlinJs]) {
    doLast {
        copy {
            from compileKotlinJs.destinationDir
            configurations.jsRuntimeClasspath.each {
                from zipTree(it.absolutePath).matching { include '*.js' }
            }
            configurations.jsTestRuntimeClasspath.each {
                from zipTree(it.absolutePath).matching { include '*.js' }
            }
            
            into "${rootDir}/node_modules"
        }
    }
}

task runTestsWithMocha(type: NodeTask, dependsOn: [populateNodeModulesForTests]) {
    script = file("${rootDir}/node_modules/mocha/bin/mocha")
    args = [
            compileTestKotlinJs.outputFile,
            "--reporter-options", "topLevelSuite=${project.name}-tests",
    ]
}
jsTest.dependsOn(runTestsWithMocha)